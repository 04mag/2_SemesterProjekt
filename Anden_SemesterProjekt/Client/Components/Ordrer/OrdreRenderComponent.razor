@using Anden_SemesterProjekt.Client.Services
@using Anden_SemesterProjekt.Shared.Models
@using System.Drawing
<div class="col-12">
    <div style="background-color:@BackgroundColor" class="row border border-primary rounded mb-1 p-1 align-middle">
        <div class="col-md-1 p-1">
            <span>#: @Ordre.OrdreId</span>
        </div>
        @if (Ordre.Kunde != null)
        {
            <div class="col-md-2 p-1">
                <span>@Ordre.Kunde.Navn</span>
            </div>
        }
        <div class="col-md-2 p-1">
            <span>Start Dato: @Ordre.StartDato.ToShortDateString()</span>
        </div>
        <div class="col-md-2 p-1">
            <span>Slut Dato: @Ordre.SlutDato.ToShortDateString()</span>
        </div>
        <div class="col-md-2 p-1">
            <span>Status: @Ordre.GetStatus()</span>
        </div>
        <div class="col-md-3 p-1">
            <button disabled="@isBusy" type="button" class="btn btn-primary float-end mb-2" @onclick="HandleClick">@GetInfoString()</button>
            @if (Ordre.ErAfsluttet == false)
            {
                <button disabled="@isBusy" type="button" class="btn btn-warning float-end me-2 mb-2" @onclick="OnEditClicked">Rediger</button>
            }
            @if (Ordre.ErAfsluttet == true)
            {
                @if (!Ordre.ErBetalt)
                {
                    <button disabled="@isBusy" type="button" class="btn btn-danger float-end me-2 mb-2" @onclick="OnBetaltClicked">@ErBetaltButtonText</button>
                }
            }
        </div>
    </div>
</div>

@code {
    [Inject]
    private IJSRuntime JS { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public IOrdreClientService OrdreService { get; set; }

    [Parameter, EditorRequired]
    public Ordre Ordre { get; set; } = new Ordre();

    [Parameter]
    public String BackgroundColor { get; set; } = "#ffffff";

    private bool isBusy = false;

    public string ErBetaltButtonText 
    {
        get 
        {
            if (Ordre.ErBetalt)
            {
                return "Betalt";
            }
            else
            {
                return "Marker som betalt";
            }
        }
    }

    private void HandleClick()
    {
        isBusy = true;
        NavigationManager.NavigateTo($"/ordrer/{Ordre.OrdreId}");
        isBusy = false;
    }

    private void OnEditClicked()
    {
        isBusy = true;
        NavigationManager.NavigateTo($"/ordrer/edit/{Ordre.OrdreId}");
        isBusy = false;
    }

    private async Task OnBetaltClicked()
    {
        isBusy = true;

        if (Ordre.ErBetalt == false)
        {
            bool confirmBetaling = await JS.InvokeAsync<bool>("confirm", "Er du sikker på at du vil markere ordren som betalt?");

            if (confirmBetaling)
            {
                Ordre.ErBetalt = true;
                Ordre.BetalingsDato = DateTime.Now;

                if (Ordre != null)
                {
                    var response = await OrdreService.UpdateOrdre(Ordre);

                    if (!response.IsSuccessStatusCode)
                    {
                        Ordre.ErBetalt = false;
                    }
                }
            }
        }

        isBusy = false;
    }


    public string GetInfoString()
    {
        if (Ordre.ErAfsluttet && Ordre.ErBetalt)
        {
            return "Vis Kvittering";
        }
        else if (Ordre.ErAfsluttet && !Ordre.ErBetalt)
        {
            return "Vis Faktura";
        }
        else
        {
            return "Vis Ordre";
        }
    }
}
