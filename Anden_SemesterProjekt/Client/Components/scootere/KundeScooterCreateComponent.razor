@using Anden_SemesterProjekt.Shared.Models
@using Anden_SemesterProjekt.Client.Services



@page "/create-scooter"

<h3>Opret ny Scooter</h3>

<EditForm Model="newScooter" OnValidSubmit="HandleCreateScooter">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Stelnummer -->
    <div>
        <label for="stelnummer">Stelnummer:</label>
        <input id="stelnummer" class="form-control" @bind="newScooter.Stelnummer" />
        <ValidationMessage For="@(() => newScooter.Stelnummer)" />
    </div>

    <!-- Registreringsnummer -->
    <div>
        <label for="registreringsnummer">Registreringsnummer:</label>
        <input id="registreringsnummer" class="form-control" @bind="newScooter.Registreringsnummer" />
        <ValidationMessage For="@(() => newScooter.Registreringsnummer)" />
    </div>

    <!-- Dropdown for Mærker -->
    <div class="row p-3 mb-5 border border-primary rounded">
        <div class="col-md-4 mb-3">
            <h3>Vælg Mærke</h3>
        </div>
        <div class="col-md-4 mb-3">
            <select class="form-control form-select" @bind="newScooter.MærkeId">
                <option value="0">-- Vælg Mærke --</option>
                @if (Mærker != null)
                {
                    @foreach (var mærke in Mærker)
                    {
                        <option value="@mærke.MærkeId">@mærke.ScooterMærke</option>
                    }
                }
            </select>
            <ValidationMessage For="@(() => newScooter.MærkeId)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Opret Scooter</button>
</EditForm>

@if (successMessage != null)
{
    <p style="color: green;">@successMessage</p>
}

@if (errorMessage != null)
{
    <p style="color: red;">@errorMessage</p>
}

@code {
    private Scooter newScooter = new Scooter();
    private List<Mærke> Mærker = new List<Mærke>(); // Liste til at gemme mærker
    private string? successMessage;
    private string? errorMessage;

    [Inject]
    private MærkeClientService MærkeClientService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Hent mærker fra API
            Mærker = await MærkeClientService.GetMærker();
            if (Mærker == null || Mærker.Count == 0)
            {
                errorMessage = "Kunne ikke hente mærker.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Fejl under hentning af mærker: {ex.Message}";
        }
    }

    private async Task HandleCreateScooter()
    {
        try
        {
            // Simuler handling for at oprette scooter
            successMessage = "Scooteren blev oprettet og sendt til kunden!";
            errorMessage = null;

            newScooter = new Scooter(); // Clear the form
        }
        catch (Exception ex)
        {
            successMessage = null;
            errorMessage = "Der opstod en fejl: " + ex.Message;
        }
    }
}
